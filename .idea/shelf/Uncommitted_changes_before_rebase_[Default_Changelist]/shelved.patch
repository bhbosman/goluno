Index: ../gocomms/stacks/pingPong/internal/stackData.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package internal\r\n\r\nimport (\r\n\t\"context\"\r\n\tpingpong \"github.com/bhbosman/goMessages/pingpong/stream\"\r\n\t\"github.com/bhbosman/gocommon/stream\"\r\n\t\"github.com/bhbosman/gocomms/internal\"\r\n\t\"github.com/bhbosman/goprotoextra\"\r\n\t\"github.com/reactivex/rxgo/v2\"\r\n\t\"go.uber.org/multierr\"\r\n\t\"google.golang.org/protobuf/types/known/timestamppb\"\r\n\t\"time\"\r\n)\r\n\r\ntype StackData struct {\r\n\tbytesSend       int\r\n\tstarted         bool // to be removed\r\n\trequestId       int64\r\n\toutboundChannel *internal.ChannelManager\r\n\tctx             context.Context\r\n}\r\n\r\nfunc (self *StackData) SendPong(rws goprotoextra.ReadWriterSize) {\r\n\t//self.bytesSend += rws.Size()\r\n\t//self.outboundChannel.SendRwsNonBlocking(rws)\r\n}\r\n\r\nfunc (self *StackData) GetBytesSend() int {\r\n\treturn self.bytesSend\r\n}\r\n\r\nfunc (self *StackData) SendNonBlockingError(err error) {\r\n\tself.outboundChannel.SendNonBlocking(err)\r\n}\r\n\r\nfunc (self *StackData) SendRwsNonBlocking(rws goprotoextra.ReadWriterSize) {\r\n\tself.outboundChannel.SendRwsNonBlocking(rws)\r\n}\r\n\r\nfunc (self *StackData) Items() <-chan rxgo.Item {\r\n\treturn self.outboundChannel.Items\r\n}\r\n\r\nfunc (self *StackData) PongReceived(v *pingpong.Pong) {\r\n\t//receiveTime := time.Now()\r\n\t//sendTime := time.Unix(v.RequestTimeStamp.Seconds, int64(v.RequestTimeStamp.Nanos))\r\n\t//deltaTime := receiveTime.Sub(sendTime)\r\n}\r\n\r\nfunc (self *StackData) OutboundChannel() *internal.ChannelManager {\r\n\treturn self.outboundChannel\r\n}\r\n\r\nfunc NewStackData(ctx context.Context, connectionId string) IStackData {\r\n\treturn &StackData{\r\n\t\tstarted:         false,\r\n\t\trequestId:       0,\r\n\t\toutboundChannel: internal.NewChannelManager(\"outbound PingPong\", connectionId),\r\n\t\tctx:             ctx,\r\n\t}\r\n}\r\n\r\nfunc (self *StackData) Send(ctx context.Context, data interface{}) {\r\n\tself.outboundChannel.Send(ctx, data)\r\n}\r\n\r\nfunc (self *StackData) Close() error {\r\n\tvar err error = nil\r\n\terr = multierr.Append(err, self.outboundChannel.Close())\r\n\treturn err\r\n}\r\n\r\nfunc (self *StackData) SendNonBlocking(data interface{}) {\r\n\tself.outboundChannel.SendNonBlocking(data)\r\n}\r\n\r\nfunc (self *StackData) Started() bool {\r\n\treturn self.started\r\n}\r\n\r\nfunc (self *StackData) Destroy() error {\r\n\treturn self.Close()\r\n}\r\n\r\nfunc (self *StackData) Ping() {\r\n\tsendTime := time.Now()\r\n\tmsg := &pingpong.Ping{\r\n\t\tRequestId: 0,\r\n\t\tRequestTimeStamp: &timestamppb.Timestamp{\r\n\t\t\tSeconds: sendTime.Unix(),\r\n\t\t\tNanos:   int32(sendTime.Nanosecond()),\r\n\t\t},\r\n\t}\r\n\trws, err := stream.Marshall(msg)\r\n\tif err != nil {\r\n\t\treturn\r\n\t}\r\n\tself.bytesSend += rws.Size()\r\n\tself.outboundChannel.SendNonBlocking(rws)\r\n}\r\n\r\nfunc (self *StackData) Start(ctx context.Context) error {\r\n\tif ctx.Err() != nil {\r\n\t\treturn ctx.Err()\r\n\t}\r\n\tself.started = true\r\n\tgo func(ctx context.Context) {\r\n\t\tticker := time.NewTicker(time.Second * 1)\r\n\t\tdefer func(ticker *time.Ticker) {\r\n\t\t\tticker.Stop()\r\n\t\t}(ticker)\r\n\tloop:\r\n\t\tfor true {\r\n\t\t\tselect {\r\n\t\t\tcase <-ctx.Done():\r\n\t\t\t\tbreak loop\r\n\t\t\tcase _, ok := <-ticker.C:\r\n\t\t\t\tif ok {\r\n\t\t\t\t\tself.Ping()\r\n\t\t\t\t}\r\n\t\t\t\tcontinue loop\r\n\t\t\t}\r\n\t\t}\r\n\t}(self.ctx)\r\n\r\n\treturn nil\r\n}\r\n\r\nfunc (self *StackData) Stop() error {\r\n\tself.started = false\r\n\treturn self.Close()\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../gocomms/stacks/pingPong/internal/stackData.go b/../gocomms/stacks/pingPong/internal/stackData.go
--- a/../gocomms/stacks/pingPong/internal/stackData.go	(revision 261800e529fb198caac2daae316478f459e168d4)
+++ b/../gocomms/stacks/pingPong/internal/stackData.go	(date 1629697489754)
@@ -14,7 +14,6 @@
 
 type StackData struct {
 	bytesSend       int
-	started         bool // to be removed
 	requestId       int64
 	outboundChannel *internal.ChannelManager
 	ctx             context.Context
@@ -53,7 +52,6 @@
 
 func NewStackData(ctx context.Context, connectionId string) IStackData {
 	return &StackData{
-		started:         false,
 		requestId:       0,
 		outboundChannel: internal.NewChannelManager("outbound PingPong", connectionId),
 		ctx:             ctx,
@@ -74,10 +72,6 @@
 	self.outboundChannel.SendNonBlocking(data)
 }
 
-func (self *StackData) Started() bool {
-	return self.started
-}
-
 func (self *StackData) Destroy() error {
 	return self.Close()
 }
@@ -103,7 +97,6 @@
 	if ctx.Err() != nil {
 		return ctx.Err()
 	}
-	self.started = true
 	go func(ctx context.Context) {
 		ticker := time.NewTicker(time.Second * 1)
 		defer func(ticker *time.Ticker) {
@@ -127,6 +120,5 @@
 }
 
 func (self *StackData) Stop() error {
-	self.started = false
 	return self.Close()
 }
Index: ../gocomms/stacks/pingPong/internal/InboundStackHandler.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package internal\r\n\r\nimport (\r\n\tpingpong \"github.com/bhbosman/goMessages/pingpong/stream\"\r\n\t\"github.com/bhbosman/gocommon/stream\"\r\n\t\"github.com/bhbosman/gocomms/RxHandlers\"\r\n\t\"github.com/bhbosman/goprotoextra\"\r\n\t\"github.com/golang/protobuf/ptypes\"\r\n)\r\n\r\ntype InboundStackHandler struct {\r\n\terrorState error\r\n\tstackData  IStackData\r\n}\r\n\r\nfunc (self *InboundStackHandler) GetAdditionalBytesSend() int {\r\n\treturn 0\r\n}\r\n\r\nfunc (self *InboundStackHandler) ReadMessage(i interface{}) {\r\n}\r\n\r\nfunc (self *InboundStackHandler) Close() error {\r\n\treturn nil\r\n}\r\n\r\nfunc (self *InboundStackHandler) NextReadWriterSizeWithHandler(size goprotoextra.ReadWriterSize, handler RxHandlers.IReadWriterSizeHandler) error {\r\n\treturn self.NextReadWriterSize(size, handler.Handler, handler.SizeUpdate)\r\n}\r\n\r\nfunc (self *InboundStackHandler) OnError(err error) {\r\n\tself.errorState = err\r\n}\r\n\r\nfunc (self *InboundStackHandler) NextReadWriterSize(\r\n\tincoming goprotoextra.ReadWriterSize,\r\n\tonNext func(rws goprotoextra.ReadWriterSize),\r\n\tsizeUpdate func(size int)) error {\r\n\r\n\tif self.errorState != nil {\r\n\t\treturn self.errorState\r\n\t}\r\n\tif self.stackData.Started() {\r\n\t\ttc, err := incoming.ReadTypeCode()\r\n\t\tif err != nil {\r\n\t\t\tself.errorState = err\r\n\t\t\treturn self.errorState\r\n\t\t}\r\n\t\tswitch tc {\r\n\t\tcase pingpong.PingTypeCode:\r\n\t\t\tmsg, err := stream.UnMarshal(incoming, nil, nil, nil, nil)\r\n\t\t\tif err != nil {\r\n\t\t\t\tself.errorState = err\r\n\t\t\t\treturn self.errorState\r\n\t\t\t}\r\n\t\t\tswitch v := msg.(type) {\r\n\t\t\tcase *pingpong.PingWrapper:\r\n\t\t\t\tpong := &pingpong.Pong{\r\n\t\t\t\t\tRequestId:         v.Data.RequestId,\r\n\t\t\t\t\tRequestTimeStamp:  v.Data.RequestTimeStamp,\r\n\t\t\t\t\tResponseTimeStamp: ptypes.TimestampNow(),\r\n\t\t\t\t}\r\n\t\t\t\tmarshall, err := stream.Marshall(pong)\r\n\t\t\t\tif err != nil {\r\n\t\t\t\t\tself.errorState = err\r\n\t\t\t\t\treturn self.errorState\r\n\t\t\t\t}\r\n\t\t\t\tself.stackData.SendPong(marshall)\r\n\t\t\t}\r\n\t\t\treturn nil\r\n\r\n\t\tcase pingpong.PongTypeCode:\r\n\t\t\tmsg := &pingpong.Pong{}\r\n\t\t\terr := stream.UnMarshalMessage(incoming, msg)\r\n\t\t\tif err != nil {\r\n\t\t\t\tself.errorState = err\r\n\t\t\t\treturn self.errorState\r\n\t\t\t}\r\n\t\t\tself.stackData.PongReceived(msg)\r\n\t\t}\r\n\t}\r\n\tonNext(incoming)\r\n\treturn nil\r\n}\r\n\r\nfunc (self *InboundStackHandler) OnComplete() {\r\n\tself.errorState = RxHandlers.RxHandlerComplete\r\n}\r\n\r\nfunc NewInboundStackHandler(stackData IStackData) *InboundStackHandler {\r\n\treturn &InboundStackHandler{\r\n\t\terrorState: nil,\r\n\t\tstackData:  stackData,\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../gocomms/stacks/pingPong/internal/InboundStackHandler.go b/../gocomms/stacks/pingPong/internal/InboundStackHandler.go
--- a/../gocomms/stacks/pingPong/internal/InboundStackHandler.go	(revision 261800e529fb198caac2daae316478f459e168d4)
+++ b/../gocomms/stacks/pingPong/internal/InboundStackHandler.go	(date 1629697388380)
@@ -40,45 +40,46 @@
 	if self.errorState != nil {
 		return self.errorState
 	}
-	if self.stackData.Started() {
-		tc, err := incoming.ReadTypeCode()
-		if err != nil {
-			self.errorState = err
-			return self.errorState
-		}
-		switch tc {
-		case pingpong.PingTypeCode:
-			msg, err := stream.UnMarshal(incoming, nil, nil, nil, nil)
-			if err != nil {
-				self.errorState = err
-				return self.errorState
-			}
-			switch v := msg.(type) {
-			case *pingpong.PingWrapper:
-				pong := &pingpong.Pong{
-					RequestId:         v.Data.RequestId,
-					RequestTimeStamp:  v.Data.RequestTimeStamp,
-					ResponseTimeStamp: ptypes.TimestampNow(),
-				}
-				marshall, err := stream.Marshall(pong)
-				if err != nil {
-					self.errorState = err
-					return self.errorState
-				}
-				self.stackData.SendPong(marshall)
-			}
-			return nil
+	var tc uint32
+	var err error
+	tc, err = incoming.ReadTypeCode()
+	if err != nil {
+		self.errorState = err
+		return self.errorState
+	}
+	switch tc {
+	case pingpong.PingTypeCode:
+		msg, err := stream.UnMarshal(incoming, nil, nil, nil, nil)
+		if err != nil {
+			self.errorState = err
+			return self.errorState
+		}
+		switch v := msg.(type) {
+		case *pingpong.PingWrapper:
+			pong := &pingpong.Pong{
+				RequestId:         v.Data.RequestId,
+				RequestTimeStamp:  v.Data.RequestTimeStamp,
+				ResponseTimeStamp: ptypes.TimestampNow(),
+			}
+			marshall, err := stream.Marshall(pong)
+			if err != nil {
+				self.errorState = err
+				return self.errorState
+			}
+			self.stackData.SendPong(marshall)
+		}
+		return nil
 
-		case pingpong.PongTypeCode:
-			msg := &pingpong.Pong{}
-			err := stream.UnMarshalMessage(incoming, msg)
-			if err != nil {
-				self.errorState = err
-				return self.errorState
-			}
-			self.stackData.PongReceived(msg)
-		}
+	case pingpong.PongTypeCode:
+		msg := &pingpong.Pong{}
+		err := stream.UnMarshalMessage(incoming, msg)
+		if err != nil {
+			self.errorState = err
+			return self.errorState
+		}
+		self.stackData.PongReceived(msg)
 	}
+
 	onNext(incoming)
 	return nil
 }
Index: ../gocomms/stacks/pingPong/internal/IStackData.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package internal\r\n\r\nimport (\r\n\t\"context\"\r\n\tpingpong \"github.com/bhbosman/goMessages/pingpong/stream\"\r\n\t\"github.com/bhbosman/gocomms/RxHandlers\"\r\n\t\"github.com/bhbosman/goprotoextra\"\r\n\t\"github.com/reactivex/rxgo/v2\"\r\n\t\"io\"\r\n)\r\n\r\ntype IStackData interface {\r\n\tio.Closer\r\n\tRxHandlers.INextCall\r\n\tStarted() bool\r\n\tItems() <-chan rxgo.Item\r\n\tSendNonBlocking(data interface{})\r\n\tDestroy() error\r\n\tStart(ctx context.Context) error\r\n\tStop() error\r\n\tPongReceived(v *pingpong.Pong)\r\n\tGetBytesSend() int\r\n\tSendPong(marshall goprotoextra.ReadWriterSize)\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../gocomms/stacks/pingPong/internal/IStackData.go b/../gocomms/stacks/pingPong/internal/IStackData.go
--- a/../gocomms/stacks/pingPong/internal/IStackData.go	(revision 261800e529fb198caac2daae316478f459e168d4)
+++ b/../gocomms/stacks/pingPong/internal/IStackData.go	(date 1629697364010)
@@ -12,7 +12,6 @@
 type IStackData interface {
 	io.Closer
 	RxHandlers.INextCall
-	Started() bool
 	Items() <-chan rxgo.Item
 	SendNonBlocking(data interface{})
 	Destroy() error
Index: ../gocomms/RxHandlers/RxNextHandler.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package RxHandlers\r\n\r\nimport (\r\n\t\"github.com/bhbosman/gocomms/connectionManager\"\r\n\t\"github.com/bhbosman/goprotoextra\"\r\n\t\"go.uber.org/multierr\"\r\n\t\"io\"\r\n)\r\n\r\ntype IRxNextHandler interface {\r\n\tOnHandler(i interface{})\r\n\tOnError(err error)\r\n\tOnComplete()\r\n}\r\n\r\ntype RxNextHandler struct {\r\n\tBaseRxHandler\r\n\tnext        IRxNextStackHandler\r\n\tnextChannel INextCall\r\n\tErrorState  error\r\n\tname        string\r\n}\r\n\r\nfunc (self *RxNextHandler) Close() error {\r\n\tvar err error\r\n\terr = multierr.Append(err, self.BaseRxHandler.Close())\r\n\terr = multierr.Append(err, self.nextChannel.Close())\r\n\treturn err\r\n}\r\n\r\nfunc (self *RxNextHandler) toNextChannelWithByteOutCount(rws goprotoextra.ReadWriterSize) {\r\n\t//self.RwsMessageCount++\r\n\tself.RwsByteCountOut += rws.Size()\r\n\tself.nextChannel.SendRwsNonBlocking(rws)\r\n}\r\n\r\nfunc (self *RxNextHandler) updateOutByteCount(size int) {\r\n\tself.RwsByteCountOut += size\r\n}\r\n\r\nfunc (self *RxNextHandler) OnHandler(i interface{}) {\r\n\t// What ever code is added there, please adhere to two states: self.next assigned and self.net not assigned\r\n\tif self.ErrorState != nil {\r\n\t\treturn\r\n\t}\r\n\tvar ok bool\r\n\tvar rws goprotoextra.ReadWriterSize\r\n\tif rws, ok = i.(goprotoextra.ReadWriterSize); ok {\r\n\t\tself.RwsMessageCount++\r\n\t\tself.RwsByteCountIn += rws.Size()\r\n\t\tif self.next != nil {\r\n\t\t\terr := self.next.NextReadWriterSize(rws, self.toNextChannelWithByteOutCount, self.updateOutByteCount)\r\n\t\t\tif err != nil {\r\n\t\t\t\tself.ErrorState = err\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tself.toNextChannelWithByteOutCount(rws)\r\n\t\t}\r\n\t} else {\r\n\t\tself.OtherMessageCount++\r\n\t\tif publishRxHandlerCounters, ok := i.(*connectionManager.PublishRxHandlerCounters); ok {\r\n\t\t\tbyteOutCount := self.RwsByteCountOut\r\n\t\t\tif self.next != nil {\r\n\t\t\t\tbyteOutCount += self.next.GetAdditionalBytesSend()\r\n\t\t\t}\r\n\t\t\tcounter := connectionManager.NewRxHandlerCounter(self.name, self.OtherMessageCount, self.RwsMessageCount, self.RwsByteCountIn, byteOutCount)\r\n\t\t\tpublishRxHandlerCounters.Add(counter)\r\n\t\t\tself.nextChannel.SendNonBlocking(i)\r\n\t\t} else {\r\n\t\t\tself.nextChannel.SendNonBlocking(i)\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\nfunc (self *RxNextHandler) OnError(err error) {\r\n\tself.ErrorState = err\r\n\tif self.next != nil {\r\n\t\tself.next.OnError(err)\r\n\t}\r\n\tself.nextChannel.SendNonBlockingError(err)\r\n}\r\n\r\nfunc (self *RxNextHandler) OnComplete() {\r\n\tself.ErrorState = RxHandlerComplete\r\n\tif self.next != nil {\r\n\t\tself.next.OnComplete()\r\n\t}\r\n\t_ = self.nextChannel.Close()\r\n}\r\n\r\ntype INextCall interface {\r\n\tio.Closer\r\n\tSendNonBlocking(data interface{})\r\n\tSendRwsNonBlocking(rws goprotoextra.ReadWriterSize)\r\n\tSendNonBlockingError(err error)\r\n}\r\n\r\nfunc NewRxNextHandler(\r\n\tname string,\r\n\tnext IRxNextStackHandler,\r\n\tnextChannel INextCall) *RxNextHandler {\r\n\treturn &RxNextHandler{\r\n\t\tBaseRxHandler: BaseRxHandler{\r\n\t\t\tRwsMessageCount:   0,\r\n\t\t\tOtherMessageCount: 0,\r\n\t\t\tRwsByteCountIn:    0,\r\n\t\t\tRwsByteCountOut:   0,\r\n\t\t},\r\n\t\tnext:        next,\r\n\t\tnextChannel: nextChannel,\r\n\t\tErrorState:  nil,\r\n\t\tname:        name,\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../gocomms/RxHandlers/RxNextHandler.go b/../gocomms/RxHandlers/RxNextHandler.go
--- a/../gocomms/RxHandlers/RxNextHandler.go	(revision 261800e529fb198caac2daae316478f459e168d4)
+++ b/../gocomms/RxHandlers/RxNextHandler.go	(date 1629697490047)
@@ -29,9 +29,11 @@
 }
 
 func (self *RxNextHandler) toNextChannelWithByteOutCount(rws goprotoextra.ReadWriterSize) {
-	//self.RwsMessageCount++
-	self.RwsByteCountOut += rws.Size()
-	self.nextChannel.SendRwsNonBlocking(rws)
+	rwsSize := rws.Size()
+	if rwsSize != 0 {
+		self.RwsByteCountOut += rws.Size()
+		self.nextChannel.SendRwsNonBlocking(rws)
+	}
 }
 
 func (self *RxNextHandler) updateOutByteCount(size int) {
