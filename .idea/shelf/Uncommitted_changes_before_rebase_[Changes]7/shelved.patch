Index: ../gocomms/common/connWrapper.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package common\r\n\r\nimport (\r\n\t\"context\"\r\n\t\"github.com/bhbosman/goCommsDefinitions\"\r\n\t\"github.com/bhbosman/goerrors\"\r\n\t\"github.com/bhbosman/gomessageblock\"\r\n\t\"github.com/reactivex/rxgo/v2\"\r\n\t\"go.uber.org/multierr\"\r\n\t\"io\"\r\n\t\"net\"\r\n\t\"time\"\r\n)\r\n\r\ntype ConnWrapperNext func(payload []byte) (int, error)\r\n\r\ntype ConnWrapper struct {\r\n\tconn            goCommsDefinitions.ISpecificInformationForConnection\r\n\tisDisposed      bool\r\n\tcancelCtx       context.Context\r\n\tpipeReader      io.ReadCloser\r\n\tconnWrapperNext ConnWrapperNext\r\n\tBytesWritten    int\r\n\tBytesRead       int\r\n}\r\n\r\nfunc (self *ConnWrapper) LocalAddr() net.Addr {\r\n\treturn self.conn.LocalAddr()\r\n}\r\n\r\nfunc (self *ConnWrapper) RemoteAddr() net.Addr {\r\n\treturn self.conn.RemoteAddr()\r\n}\r\n\r\nfunc (self *ConnWrapper) SetDeadline(t time.Time) error {\r\n\treturn self.conn.SetDeadline(t)\r\n}\r\n\r\nfunc (self *ConnWrapper) SetReadDeadline(t time.Time) error {\r\n\treturn self.conn.SetReadDeadline(t)\r\n}\r\n\r\nfunc (self *ConnWrapper) SetWriteDeadline(t time.Time) error {\r\n\treturn self.conn.SetWriteDeadline(t)\r\n}\r\n\r\nfunc (self *ConnWrapper) Read(b []byte) (n int, err error) {\r\n\tif self.cancelCtx.Err() != nil {\r\n\t\treturn 0, self.cancelCtx.Err()\r\n\t}\r\n\tn, err = self.pipeReader.Read(b)\r\n\tself.BytesRead += n\r\n\treturn n, err\r\n}\r\n\r\nfunc (self *ConnWrapper) Write(b []byte) (n int, err error) {\r\n\tif self.cancelCtx.Err() != nil {\r\n\t\treturn 0, self.cancelCtx.Err()\r\n\t}\r\n\tself.BytesWritten += len(b)\r\n\treturn self.connWrapperNext(b)\r\n}\r\n\r\nfunc (self *ConnWrapper) Close() error {\r\n\tif !self.isDisposed {\r\n\t\tself.isDisposed = true\r\n\t\tvar err error\r\n\t\terr = multierr.Append(err, self.pipeReader.Close())\r\n\t\treturn err\r\n\t}\r\n\treturn nil\r\n}\r\n\r\nfunc nextOutBoundPath(ctx context.Context, itemChannel chan<- rxgo.Item) ConnWrapperNext {\r\n\treturn func(b []byte) (n int, err error) {\r\n\t\tif ctx.Err() != nil {\r\n\t\t\treturn 0, ctx.Err()\r\n\t\t}\r\n\t\tdataToConnection := gomessageblock.NewReaderWriterSize(len(b))\r\n\t\tif ctx.Err() != nil {\r\n\t\t\treturn 0, ctx.Err()\r\n\t\t}\r\n\t\tn, err = dataToConnection.Write(b)\r\n\t\tif err != nil {\r\n\t\t\treturn 0, err\r\n\t\t}\r\n\t\tif ctx.Err() != nil {\r\n\t\t\treturn 0, ctx.Err()\r\n\t\t}\r\n\t\trxgo.Of(dataToConnection).SendContext(ctx, itemChannel)\r\n\t\treturn n, nil\r\n\t}\r\n}\r\n\r\nfunc NewConnWrapper(\r\n\tconn goCommsDefinitions.ISpecificInformationForConnection,\r\n\tcancelCtx context.Context,\r\n\tpipeRead io.ReadCloser,\r\n\titemChannel chan<- rxgo.Item,\r\n) (*ConnWrapper, error) {\r\n\tvar errList error = nil\r\n\tif conn == nil {\r\n\t\terrList = multierr.Append(errList, goerrors.InvalidParam)\r\n\t}\r\n\tif cancelCtx == nil {\r\n\t\terrList = multierr.Append(errList, goerrors.InvalidParam)\r\n\t}\r\n\tif pipeRead == nil {\r\n\t\terrList = multierr.Append(errList, goerrors.InvalidParam)\r\n\t}\r\n\r\n\toutBound := nextOutBoundPath(cancelCtx, itemChannel)\r\n\tif outBound == nil {\r\n\t\terrList = multierr.Append(errList, goerrors.InvalidParam)\r\n\t}\r\n\r\n\tif errList != nil {\r\n\t\treturn nil, errList\r\n\t}\r\n\r\n\treturn &ConnWrapper{\r\n\t\tconn:            conn,\r\n\t\tcancelCtx:       cancelCtx,\r\n\t\tpipeReader:      pipeRead,\r\n\t\tconnWrapperNext: outBound,\r\n\t}, nil\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../gocomms/common/connWrapper.go b/../gocomms/common/connWrapper.go
--- a/../gocomms/common/connWrapper.go	(revision 882a594585ed1b94f6db4fcc698517210d95b295)
+++ b/../gocomms/common/connWrapper.go	(date 1656631732720)
@@ -71,7 +71,7 @@
 	return nil
 }
 
-func nextOutBoundPath(ctx context.Context, itemChannel chan<- rxgo.Item) ConnWrapperNext {
+func nextOutBoundPath(ctx context.Context, nextFunc rxgo.NextFunc) ConnWrapperNext {
 	return func(b []byte) (n int, err error) {
 		if ctx.Err() != nil {
 			return 0, ctx.Err()
@@ -87,7 +87,8 @@
 		if ctx.Err() != nil {
 			return 0, ctx.Err()
 		}
-		rxgo.Of(dataToConnection).SendContext(ctx, itemChannel)
+		//rxgo.Of(dataToConnection).SendContext(ctx, itemChannel)
+		nextFunc(dataToConnection)
 		return n, nil
 	}
 }
@@ -96,6 +97,7 @@
 	conn goCommsDefinitions.ISpecificInformationForConnection,
 	cancelCtx context.Context,
 	pipeRead io.ReadCloser,
+	nextFunc rxgo.NextFunc,
 	itemChannel chan<- rxgo.Item,
 ) (*ConnWrapper, error) {
 	var errList error = nil
@@ -109,7 +111,7 @@
 		errList = multierr.Append(errList, goerrors.InvalidParam)
 	}
 
-	outBound := nextOutBoundPath(cancelCtx, itemChannel)
+	outBound := nextOutBoundPath(cancelCtx, nextFunc)
 	if outBound == nil {
 		errList = multierr.Append(errList, goerrors.InvalidParam)
 	}
Index: ../gocomms/common/InvokeFxLifeCycleStartStopStackHeartbeat.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package common\r\n\r\nimport (\r\n\t\"context\"\r\n\t\"github.com/bhbosman/gocommon/GoFunctionCounter\"\r\n\t\"github.com/bhbosman/gocommon/model\"\r\n\t\"github.com/bhbosman/gocomms/RxHandlers\"\r\n\t\"github.com/reactivex/rxgo/v2\"\r\n\t\"go.uber.org/fx\"\r\n\t\"time\"\r\n)\r\n\r\nfunc InvokeFxLifeCycleStartStopStackHeartbeat(\r\n\tparams struct {\r\n\t\tfx.In\r\n\t\tCancelCtx                   context.Context\r\n\t\tLifecycle                   fx.Lifecycle\r\n\t\tConnectionId                string                    `name:\"ConnectionId\"`\r\n\t\tRxNextHandlerForNetConnRead *RxHandlers.RxNextHandler `name:\"net.conn.read\"`\r\n\t\tNextFuncOutBoundChannel     rxgo.NextFunc             `name:\"OutBoundChannel\"`\r\n\t\t//ErrorFunc                   rxgo.ErrorFunc            `name:\"OutBoundChannel\"`\r\n\t\t//CompleteFunc                rxgo.CompletedFunc        `name:\"OutBoundChannel\"`\r\n\t\tGoFunctionCounter GoFunctionCounter.IService\r\n\t},\r\n) {\r\n\tparams.Lifecycle.Append(fx.Hook{\r\n\t\tOnStart: func(_ context.Context) error {\r\n\t\t\tif params.CancelCtx.Err() != nil {\r\n\t\t\t\treturn params.CancelCtx.Err()\r\n\t\t\t}\r\n\r\n\t\t\t// this function is part of the GoFunctionCounter count\r\n\t\t\tgo func(\r\n\t\t\t\tctx context.Context,\r\n\t\t\t\tinboundStack RxHandlers.IRxNextHandler,\r\n\t\t\t\tNextFuncOutBoundChannel rxgo.NextFunc,\r\n\t\t\t) {\r\n\t\t\t\tfunctionName := params.GoFunctionCounter.CreateFunctionName(\"InvokeFxLifeCycleStartStopStackHeartbeat.OnStart\")\r\n\t\t\t\tdefer func(GoFunctionCounter GoFunctionCounter.IService, name string) {\r\n\t\t\t\t\t_ = GoFunctionCounter.Remove(name)\r\n\t\t\t\t}(params.GoFunctionCounter, functionName)\r\n\t\t\t\t_ = params.GoFunctionCounter.Add(functionName)\r\n\r\n\t\t\t\t//\r\n\t\t\t\tticker := time.NewTicker(time.Second)\r\n\t\t\t\tdefer ticker.Stop()\r\n\t\t\tloop:\r\n\t\t\t\tfor {\r\n\t\t\t\t\tselect {\r\n\t\t\t\t\tcase <-ctx.Done():\r\n\t\t\t\t\t\tbreak loop\r\n\t\t\t\t\tcase _, ok := <-ticker.C:\r\n\t\t\t\t\t\tif !ok {\r\n\t\t\t\t\t\t\tbreak loop\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tinboundStack.OnSendData(\r\n\t\t\t\t\t\t\tmodel.NewPublishRxHandlerCounters(\r\n\t\t\t\t\t\t\t\tparams.ConnectionId,\r\n\t\t\t\t\t\t\t\tmodel.StreamDirectionInbound,\r\n\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t)\r\n\r\n\t\t\t\t\t\tnextFunc(\r\n\t\t\t\t\t\t\tmodel.NewPublishRxHandlerCounters(\r\n\t\t\t\t\t\t\t\tparams.ConnectionId,\r\n\t\t\t\t\t\t\t\tmodel.StreamDirectionOutbound,\r\n\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}(params.CancelCtx, params.RxNextHandlerForNetConnRead, params.NextFuncOutBoundChannel)\r\n\t\t\treturn nil\r\n\t\t},\r\n\t\tOnStop: func(_ context.Context) error {\r\n\t\t\treturn nil\r\n\t\t},\r\n\t})\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../gocomms/common/InvokeFxLifeCycleStartStopStackHeartbeat.go b/../gocomms/common/InvokeFxLifeCycleStartStopStackHeartbeat.go
--- a/../gocomms/common/InvokeFxLifeCycleStartStopStackHeartbeat.go	(revision 882a594585ed1b94f6db4fcc698517210d95b295)
+++ b/../gocomms/common/InvokeFxLifeCycleStartStopStackHeartbeat.go	(date 1656631419209)
@@ -18,6 +18,7 @@
 		ConnectionId                string                    `name:"ConnectionId"`
 		RxNextHandlerForNetConnRead *RxHandlers.RxNextHandler `name:"net.conn.read"`
 		NextFuncOutBoundChannel     rxgo.NextFunc             `name:"OutBoundChannel"`
+		NextFuncInBoundChannel      rxgo.NextFunc             `name:"InBoundChannel"`
 		//ErrorFunc                   rxgo.ErrorFunc            `name:"OutBoundChannel"`
 		//CompleteFunc                rxgo.CompletedFunc        `name:"OutBoundChannel"`
 		GoFunctionCounter GoFunctionCounter.IService
@@ -34,6 +35,7 @@
 				ctx context.Context,
 				inboundStack RxHandlers.IRxNextHandler,
 				NextFuncOutBoundChannel rxgo.NextFunc,
+				NextFuncInBoundChannel rxgo.NextFunc,
 			) {
 				functionName := params.GoFunctionCounter.CreateFunctionName("InvokeFxLifeCycleStartStopStackHeartbeat.OnStart")
 				defer func(GoFunctionCounter GoFunctionCounter.IService, name string) {
@@ -55,13 +57,14 @@
 						}
 
 						inboundStack.OnSendData(
+							//NextFuncInBoundChannel(
 							model.NewPublishRxHandlerCounters(
 								params.ConnectionId,
 								model.StreamDirectionInbound,
 							),
 						)
 
-						nextFunc(
+						NextFuncOutBoundChannel(
 							model.NewPublishRxHandlerCounters(
 								params.ConnectionId,
 								model.StreamDirectionOutbound,
@@ -69,7 +72,7 @@
 						)
 					}
 				}
-			}(params.CancelCtx, params.RxNextHandlerForNetConnRead, params.NextFuncOutBoundChannel)
+			}(params.CancelCtx, params.RxNextHandlerForNetConnRead, params.NextFuncOutBoundChannel, params.NextFuncInBoundChannel)
 			return nil
 		},
 		OnStop: func(_ context.Context) error {
